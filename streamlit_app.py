# streamlit_app.py
import streamlit as st
import os
import sys
import traceback
import logging
import pyperclip

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Th√™m module OCR v√†o path
module_path = os.path.join(os.path.dirname(__file__), "module")
if module_path not in sys.path:
    sys.path.append(module_path)

try:
    from ocr_app import OCR
except ImportError as e:
    st.error(f"Kh√¥ng th·ªÉ import module OCR: {e}")
    st.stop()

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n t·ªõi model v√† t·ª´ ƒëi·ªÉn
CHAR_DICT_PATH = "D:/Vietnamese-handwritten/data/char_to_idx_simplified.json"
MODEL_PATH = "D:/Vietnamese-handwritten/data/new_model.keras"

# Ki·ªÉm tra file t·ªìn t·∫°i
if not os.path.exists(CHAR_DICT_PATH):
    st.error(f"Kh√¥ng t√¨m th·∫•y t·ª´ ƒëi·ªÉn k√Ω t·ª±: {CHAR_DICT_PATH}")
    st.stop()
if not os.path.exists(MODEL_PATH):
    st.error(f"Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh: {MODEL_PATH}")
    st.stop()

# T·∫°o th∆∞ m·ª•c t·∫°m
os.makedirs("temp", exist_ok=True)

# Cache OCR model
@st.cache_resource
def load_ocr():
    try:
        logger.info("ƒêang t·∫£i m√¥ h√¨nh OCR...")
        return OCR(CHAR_DICT_PATH, custom_model_path=MODEL_PATH)
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o OCR: {e}")
        st.code(traceback.format_exc())
        return None

# UI ch√≠nh
st.title("üìù Nh·∫≠n d·∫°ng ch·ªØ vi·∫øt tay ti·∫øng Vi·ªát")

ocr = load_ocr()
if ocr is None:
    st.stop()

st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")

uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh vi·∫øt tay l√™n", type=["jpg", "jpeg", "png"])
if uploaded_file:
    image_path = os.path.join("temp", uploaded_file.name)
    with open(image_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.image(image_path, caption="üì∑ ·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)

    # Ch·ªçn ph∆∞∆°ng ph√°p nh·∫≠n d·∫°ng
    use_vietocr = st.checkbox("S·ª≠ d·ª•ng VietOCR (pretrained)", value=True)

    if use_vietocr:
        if ocr.vietocr_predictor:
            st.info("VietOCR ƒë√£ s·∫µn s√†ng.")
        else:
            st.warning("‚ö†Ô∏è Ch∆∞a th·ªÉ s·ª≠ d·ª•ng VietOCR.")
    else:
        if ocr.custom_model:
            st.info("M√¥ h√¨nh t√πy ch·ªânh ƒë√£ s·∫µn s√†ng.")
        else:
            st.warning("‚ö†Ô∏è M√¥ h√¨nh t√πy ch·ªânh ch∆∞a ƒë∆∞·ª£c t·∫£i.")

    if st.button("üîç Nh·∫≠n d·∫°ng ch·ªØ"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            try:
                if use_vietocr and not ocr.vietocr_predictor:
                    st.error("VietOCR ch∆∞a ƒë∆∞·ª£c t·∫£i.")
                elif not use_vietocr and not ocr.custom_model:
                    st.error("M√¥ h√¨nh t√πy ch·ªânh ch∆∞a ƒë∆∞·ª£c t·∫£i.")
                else:
                    result = ocr.recognize(image_path, use_vietocr=use_vietocr)
                    st.success("‚úÖ Nh·∫≠n d·∫°ng th√†nh c√¥ng!")
                    st.code(result)

                    if st.button("üìã Copy k·∫øt qu·∫£"):
                        pyperclip.copy(result)
                        st.info("ƒê√£ copy vƒÉn b·∫£n v√†o clipboard.")
            except Exception as e:
                st.error(f"L·ªói khi nh·∫≠n d·∫°ng: {e}")
                st.code(traceback.format_exc())
